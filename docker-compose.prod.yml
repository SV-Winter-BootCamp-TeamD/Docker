version: "3.9"

services:
  frontend:
    container_name: frontend
    env_file:
      - ./frontend/.env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:5173"
    command: [ 'yarn', 'dev' ]
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/dist
      - /frontend/node_modules
    tty: true
    stdin_open: true
    restart: always
    networks:
      - teamd

  database:
    container_name: database
    image: mysql:8.0
    env_file:
      - ./backend/.env
    ports:
      - "3306:3306"
    networks:
      - teamd

  backend:
    container_name: backend
    env_file:
      - ./backend/.env
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/backend
      - ./backend/static/:/backend/static/
    command: sh -c "sleep 10 &&
      python manage.py migrate &&
      gunicorn backend.wsgi --preload --bind 0.0.0.0:8000 --timeout 240"
    ports:
      - "8000:8000"
    expose:
      - 8000
    depends_on:
      - database
    tty: true
    networks:
      - teamd

  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - 80
      - 443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./nginx/log:/var/log/nginx
      - build_folder:/var/www/frontend
      - ./backend/static:/backend/static
    depends_on:
      - frontend
      - backend
    networks:
      - teamd

  redis:
    container_name: redis
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - teamd

  rabbitmq:
    # hostname: rabbitmq 호스트 설정
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    env_file:
      - ./backend/.env # rabbitmq 설정 필요
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./backend:/backend
    depends_on:
      - backend
    networks:
      - teamd

  celert_worker:
    container_name: celery_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: "celery -A backend.celery worker --loglevel=info --pool=solo"
    depends_on:
      - backend
      - rabbitmq
    volumes:
      - ./backend:/backend
    networks:
      - teamd

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend
    networks:
      - teamd

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    depends_on:
      - prometheus
      - backend
    networks:
      - teamd

  node_exporter:
    container_name: node-exporter
    image: prom/node-exporter
    ports:
      - "9100:9100"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($|/)'
    networks:
      - teamd

  elasticsearch:
    build:
      context: elk/elasticsearch/
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    restart: unless-stopped

  logstash:
    build:
      context: elk/logstash/
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: elk/kibana
      args:
        ELASTIC_VERSION: 8.5.2
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: changeme
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  teamd:
    driver: bridge

volumes:
  build_folder: null
  elasticsearch: